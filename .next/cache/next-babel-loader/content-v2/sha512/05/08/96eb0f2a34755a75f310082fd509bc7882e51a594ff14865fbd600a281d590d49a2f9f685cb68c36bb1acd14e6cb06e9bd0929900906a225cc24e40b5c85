{"ast":null,"code":"const {\n  Octokit\n} = require(\"@octokit/rest\");\n\nconst {\n  Base64\n} = require(\"js-base64\");\n\nconst fs = require(\"fs\");\n\nimport { useRouter } from 'next/router';\n\nrequire(\"dotenv\").config();\n\nconst octokit = new Octokit({\n  auth: process.env.GITHUB_ACCESS_TOKEN\n}); //to upload file by providing just hash as we are naming the file with hash\n\nexport default async function handler(req, res) {\n  try {\n    //set as header and send whatever the hash u r sending\n    const filePath = \"/home/sanjana/file\";\n    const content = fs.readFileSync(filePath, \"utf-8\");\n    const contentEncoded = Base64.encode(content);\n    const hash = String(\"hello\");\n    const {\n      data\n    } = await octokit.repos.createOrUpdateFileContents({\n      // replace the owner and email with your own details\n      owner: \"manjularachana\",\n      repo: \"githubApiUsageToUploadDownload\",\n      path: hash,\n      message: \"feat: Added OUTPUT.md programatically\",\n      content: contentEncoded\n    });\n    console.log({\n      data\n    });\n    res.status(200).json({\n      data\n    });\n  } catch (err) {\n    console.error(err);\n  }\n} //import Link from 'next/link'\n//export default ({ url: { query: { name } } }) => (\n//  <p>Welcome to About! { name }</p>\n//)","map":{"version":3,"sources":["/home/sanjana/Documents/BMS/FinalYearProjectTest/MalwareDetection/pages/api/uploadFile.js"],"names":["Octokit","require","Base64","fs","useRouter","config","octokit","auth","process","env","GITHUB_ACCESS_TOKEN","handler","req","res","filePath","content","readFileSync","contentEncoded","encode","hash","String","data","repos","createOrUpdateFileContents","owner","repo","path","message","console","log","status","json","err","error"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAcC,OAAO,CAAC,eAAD,CAA3B;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAaD,OAAO,CAAC,WAAD,CAA1B;;AACA,MAAME,EAAE,GAAGF,OAAO,CAAC,IAAD,CAAlB;;AACA,SAASG,SAAT,QAA0B,aAA1B;;AAEAH,OAAO,CAAC,QAAD,CAAP,CAAkBI,MAAlB;;AAEA,MAAMC,OAAO,GAAG,IAAIN,OAAJ,CAAY;AAC1BO,EAAAA,IAAI,EAAEC,OAAO,CAACC,GAAR,CAAYC;AADQ,CAAZ,CAAhB,C,CAIA;;AACA,eAAe,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC5C,MAAI;AACA;AACA,UAAMC,QAAQ,GAAC,oBAAf;AACA,UAAMC,OAAO,GAAGZ,EAAE,CAACa,YAAH,CAAgBF,QAAhB,EAA0B,OAA1B,CAAhB;AACA,UAAMG,cAAc,GAAGf,MAAM,CAACgB,MAAP,CAAcH,OAAd,CAAvB;AACA,UAAMI,IAAI,GAACC,MAAM,CAAC,OAAD,CAAjB;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMf,OAAO,CAACgB,KAAR,CAAcC,0BAAd,CAAyC;AAC9D;AACAC,MAAAA,KAAK,EAAE,gBAFuD;AAG9DC,MAAAA,IAAI,EAAE,gCAHwD;AAI9DC,MAAAA,IAAI,EAAEP,IAJwD;AAK9DQ,MAAAA,OAAO,EAAE,uCALqD;AAM9DZ,MAAAA,OAAO,EAAEE;AANqD,KAAzC,CAAvB;AAQJW,IAAAA,OAAO,CAACC,GAAR,CAAY;AAACR,MAAAA;AAAD,KAAZ;AACAR,IAAAA,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACV,MAAAA;AAAD,KAArB;AACG,GAjBH,CAiBI,OAAOW,GAAP,EAAY;AACZJ,IAAAA,OAAO,CAACK,KAAR,CAAcD,GAAd;AACD;AACN,C,CACD;AACA;AACE;AACA","sourcesContent":["const { Octokit } = require(\"@octokit/rest\")\nconst { Base64 } = require(\"js-base64\")\nconst fs = require(\"fs\")\nimport { useRouter } from 'next/router'\n\nrequire(\"dotenv\").config()\n\nconst octokit = new Octokit({\n  auth: process.env.GITHUB_ACCESS_TOKEN,\n})\n\n//to upload file by providing just hash as we are naming the file with hash\nexport default async function handler(req, res) {\n    try {\n        //set as header and send whatever the hash u r sending\n        const filePath=\"/home/sanjana/file\"\n        const content = fs.readFileSync(filePath, \"utf-8\")\n        const contentEncoded = Base64.encode(content)\n        const hash=String(\"hello\")\n\n        const { data } = await octokit.repos.createOrUpdateFileContents({\n          // replace the owner and email with your own details\n          owner: \"manjularachana\",\n          repo: \"githubApiUsageToUploadDownload\",\n          path: hash,\n          message: \"feat: Added OUTPUT.md programatically\",\n          content: contentEncoded,\n        })\n    console.log({data})\n    res.status(200).json({data})\n      } catch (err) {\n        console.error(err)\n      }\n}\n//import Link from 'next/link'\n//export default ({ url: { query: { name } } }) => (\n  //  <p>Welcome to About! { name }</p>\n  //)\n"]},"metadata":{},"sourceType":"module"}